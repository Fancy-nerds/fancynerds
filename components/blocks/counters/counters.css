.counters{position:relative;width:100%;z-index:1}.counters .container{height:100%;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;width:100%;position:relative}.counters .container .row{width:100%}.counters__grid{display:grid;grid-template-columns:repeat(4,1fr);column-gap:30px;row-gap:30px}@media (max-width:991.98px){.counters__grid{grid-template-columns:repeat(2,1fr);max-width:560px;width:100%;margin:0 auto}}@media (max-width:575.98px){.counters__grid{grid-template-columns:1fr}}.counters__inner{position:relative;padding:83px 0;width:100%}@media (max-width:991.98px){.counters__inner{padding:70px 0}}@media (max-width:575.98px){.counters__inner{padding:55px 0}}.counters__bg{position:absolute;top:0;width:100%;height:100%;background-image:url(../../../assets/images/counters_bg.jpg.webp);background-repeat:no-repeat;background-size:cover}.counters__bg,.counters__bg img{border-radius:15px;box-shadow:23px 23px 87px 0 rgba(254,76,28,.3)}.counters__item{text-align:center}.counters .subtitle{color:#ffd68e}.counters .subtitle:after,.counters .subtitle:before{background-color:#ffd68e}.counters__count{color:#fff;font-family:RedHatDisplay,Montserrat;font-weight:900;font-size:48px;position:relative}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
